# debug locally
# act -W ./.github/workflows/deploy.yml --secret-file ./.github/.secrets --var-file ./.github/.vars -P ubuntu-latest=ghcr.io/catthehacker/ubuntu:js-latest

name: Deploy-HWCloud

on:
  release:
    types: [published]
  push: # push 到主分支自动 发布
    branches: ['master']
    paths-ignore: # 忽略一些不必要的文件
      - '.vscode/**'
      - '.claude/**'
      - '.cursor/**'
      - '.devcontainer/**'
      - '.gitignore'
      - 'README.md'
      - 'CLAUDE.md'
      - '*.dev*'
      - '*.local*'
      - '*.test*'
  # pull_request:
  #   branches: ['master']

env:
  REGISTRY: ghcr.io
  REGISTRY_MIRROR: ghcr.nju.edu.cn
  BUILD_PLATFORM: linux/amd64,linux/arm64
  IMAGE_REPOSITORY: $(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
  IMAGE_DEPLOY_TAG: $(echo ${{ github.run_id }} | tr '[:upper:]' '[:lower:]')

permissions:
  contents: read
  packages: write

jobs:
  cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.14'
      - name: Cache main install
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            node_modules
            .yarn/cache
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Cache submodules
        uses: actions/cache@v3
        id: submodules-cache
        with:
          path: .submodules
          key: ${{ runner.os }}-submodules-${{ hashFiles('.submodules/**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-submodules-
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --mode=skip-build && npx vue-demi-fix
      - name: Build Submodules
        if: steps.submodules-cache.outputs.cache-hit != 'true'
        run: yarn build:submodules
  build-image:
    needs: cache
    runs-on: ubuntu-latest
    environment:
      name: 'production'
    strategy:
      matrix:
        variant:
          - name: "standard"
            build_commands: "yarn build:web && yarn build:infrastructures"
            serve_apps: "infrastructure-service,infrastructure-bff,static-content,web"
            tag_suffix: ""
          - name: "oidc"
            build_commands: "yarn build:web:oidc && yarn build:infrastructures && yarn build:identity-server"
            serve_apps: "infrastructure-service,infrastructure-bff,identity-server,static-content,web"
            tag_suffix: "-oidc"
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }} # 声明镜像源
          username: ${{ github.actor }} # 当前github 用户名
          password: ${{ secrets.GITHUB_TOKEN }} # 当前github token
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.14'
      - name: Restore main install cache
        uses: actions/cache/restore@v3
        with:
          path: |
            node_modules
            .yarn/cache
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
      - name: Restore submodules cache
        uses: actions/cache/restore@v3
        with:
          path: .submodules
          key: ${{ runner.os }}-submodules-${{ hashFiles('.submodules/**/yarn.lock') }}
      - name: Build (${{ matrix.variant.name }})
        run: ${{ matrix.variant.build_commands }}
      - name: List dist dir
        run: ls dist
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build deploy image (${{ matrix.variant.name }})
        if: github.event_name != 'release'
        run: | # 构建镜像并发布到私有仓库； 发布完成可以去 https://github.com/aceHubert?tab=packages 查看
          docker buildx build --file Dockerfile --target deploy \
          --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:alpha${{ matrix.variant.tag_suffix }} \
          --build-arg BUILD_IGNORE=true \
          --build-arg SERVE_APPS="${{ matrix.variant.serve_apps }}" \
          --label "build-id=${{ github.run_id }}" \
          --label "build-user=${{ github.actor }}" \
          --label "variant=${{ matrix.variant.name }}" \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:alpha${{ matrix.variant.tag_suffix }} \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_DEPLOY_TAG }}${{ matrix.variant.tag_suffix }} \
          --platform ${{env.BUILD_PLATFORM}} --push .
      - name: Get release version
        if: github.event_name == 'release'
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Build release image (${{ matrix.variant.name }})
        if: github.event_name == 'release'
        run: | # 构建镜像并发布到私有仓库； 发布完成可以去 https://github.com/aceHubert?tab=packages 查看
          docker buildx build --file Dockerfile --target deploy \
          --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:latest${{ matrix.variant.tag_suffix }} \
          --build-arg BUILD_IGNORE=true \
          --build-arg SERVE_APPS="${{ matrix.variant.serve_apps }}" \
          --label "build-id=${{ github.run_id }}" \
          --label "build-user=${{ github.actor }}" \
          --label "variant=${{ matrix.variant.name }}" \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:latest${{ matrix.variant.tag_suffix }} \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:${{ steps.get_version.outputs.VERSION }}${{ matrix.variant.tag_suffix }} \
          --platform ${{env.BUILD_PLATFORM}} --push .
  deploy:
    if: github.event_name != 'release'
    needs: build-image
    runs-on: ubuntu-latest
    environment:
      name: 'production'
    env:
      # APISIX configuration
      APISIX_SERVER_PORT: ${{ vars.APISIX_SERVER_PORT || '9080' }}
      APISIX_CLIENT_SECRET: ${{ secrets.APISIX_CLIENT_SECRET }}
      DOMAIN: ${{ vars.DOMAIN }}
      # NGINX configuration
      NGINX_WORKER_PROCESSES: ${{ vars.NGINX_WORKER_PROCESSES || 'auto' }}
      NGINX_KEEPALIVE_TIMEOUT: ${{ vars.NGINX_KEEPALIVE_TIMEOUT || '65' }}
      NGINX_CLIENT_MAX_BODY_SIZE: ${{ vars.NGINX_CLIENT_MAX_BODY_SIZE || '100M' }}
      NGINX_PROXY_READ_TIMEOUT: ${{ vars.NGINX_PROXY_READ_TIMEOUT || '3600s' }}
      NGINX_PROXY_SEND_TIMEOUT: ${{ vars.NGINX_PROXY_SEND_TIMEOUT || '3600s' }}
      NGINX_PROXY_CONNECT_TIMEOUT: ${{ vars.NGINX_PROXY_CONNECT_TIMEOUT || '3600s' }}
      NGINX_PROXY_REDIRECT: ${{ vars.NGINX_PROXY_REDIRECT || 'off' }}
      NGINX_PORT: ${{ vars.NGINX_PORT || '80' }}
      NGINX_SERVER_NAME: ${{ vars.NGINX_SERVER_NAME || '_' }}
      APISIX_SERVER_HOST: ${{ vars.APISIX_SERVER_HOST || 'pomelo-apisix' }}
      POMERO_SERVER_HOST: ${{ vars.POMERO_SERVER_HOST || 'pomelo-server' }}
      POMERO_BFF_SERVER_PORT: ${{ vars.POMERO_BFF_SERVER_PORT || '3002' }}
      POMERO_IDENTITY_SERVER_PORT: ${{ vars.POMERO_IDENTITY_SERVER_PORT || '3003' }}
      POMERO_STATIC_CONTENT_PORT: ${{ vars.POMERO_STATIC_CONTENT_PORT || '3004' }}
      POMERO_WEB_PORT: ${{ vars.POMERO_WEB_PORT || '3000' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Process template files with envsubst
        run: |
          # Remove redis and mysql directories
          rm -rf example/redis example/mysql

          # Remove .keep files
          find example -name ".keep" -type f -delete

          # Install gettext-base for envsubst if not available
          which envsubst || (sudo apt-get update && sudo apt-get install -y gettext-base)

          # Process all .template files
          env_vars=$(printenv | cut -d= -f1 | sed 's/^/$/g' | paste -sd, -)
          find example -name "*.template" | while read template_file; do
            output_file="${template_file%.template}"
            echo "Processing $template_file -> $output_file"
            envsubst "$env_vars" < "$template_file" > "$output_file"
          done

          # Remove .template files
          find example -name "*.template" -type f -delete
      - name: Copy files to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.HW_SSH_HOST }} # 服务器ip地址 ; 需要去仓库的 settings/secrets/actions 去创建
          username: ${{ secrets.HW_SSH_USERNAME }} # 服务器用户名称；需要去仓库的 settings/secrets/actions 去创建
          key: ${{ secrets.HW_SSH_KEY }} # 服务器密码；需要去仓库的 settings/secrets/actions 去创建
          port: ${{ secrets.HW_SSH_PORT }} # 服务器端口，默认22；需要去仓库的 settings/secrets/actions 去创建
          source: 'example/*' # 本地文件路径
          target: '/tmp/pomelo-${{ github.run_id }}' # 服务器文件夹路径
          overwrite: true
      - name: Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HW_SSH_HOST }} # 服务器ip地址 ; 需要去仓库的 settings/secrets/actions 去创建
          username: ${{ secrets.HW_SSH_USERNAME }} # 服务器用户名称；需要去仓库的 settings/secrets/actions 去创建
          key: ${{ secrets.HW_SSH_KEY }} # 服务器密码；需要去仓库的 settings/secrets/actions 去创建
          port: ${{ secrets.HW_SSH_PORT }} # 服务器端口，默认22；需要去仓库的 settings/secrets/actions 去创建
          script: | # 发布镜像并删除之前的镜像
            whoami
            cd ${{ vars.PROJECT_DIR }}
            # Copy files
            cp -rf /tmp/pomelo-${{ github.run_id }}/example/* .
            # Change permissions
            find . -type d -exec chmod 775 {} \;
            chmod 777 ./apisix || true
            # Process env file
            echo "IMAGE_REPOSITORY=${{ env.REGISTRY_MIRROR }}/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_DEPLOY_TAG }}-oidc" > .env.${{ github.run_id }}
            echo -e "SWAGGER_DEBUG=true\nGRAPHQL_DEBUG=true\nORIGIN=https://${{vars.DOMAIN}}\nREDIS_URL=${{secrets.REDIS_URL}}\nINFRASTRUCTURE_DATABASE_CONNECTION=${{secrets.INFRASTRUCTURE_DATABASE_CONNECTION}}\nIDENTITY_DATABASE_CONNECTION=${{secrets.IDENTITY_DATABASE_CONNECTION}}\nLOG_LEVEL=${{vars.LOG_LEVEL}}" >> .env.${{ github.run_id }}
            # Up docker compose
            docker compose -f docker-compose-standard.yml --env-file .env.${{ github.run_id }} up --force-recreate -d
            # Remove unused images
            docker images -q ${{ env.REGISTRY_MIRROR }}/${{ env.IMAGE_REPOSITORY }} | grep -v $(docker images -q ${{ env.REGISTRY_MIRROR }}/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_DEPLOY_TAG }}-oidc) | xargs --no-run-if-empty docker rmi
            # Remove env file and temp files
            rm -f .env.${{ github.run_id }}
            # rm -rf /tmp/pomelo-${{ github.run_id }}
