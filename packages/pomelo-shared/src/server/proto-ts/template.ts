// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: template.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { wrappers } from 'protobufjs';
import { Observable } from 'rxjs';
import { CreateMetaRequest, DeleteMetaRequest, GetMetaRequest, UpdateMetaRequest } from './common/meta';
import { IdRequest } from './common/shared';
import { Empty } from './google/protobuf/empty';

export const protobufPackage = 'pomelo.service';

/** 模板模型，表示系统中的内容模板 */
export interface TemplateModel {
  /** 模板ID */
  id: number;
  /** 标题 */
  title: string;
  /** 名称（唯一标识） */
  name: string;
  /** 作者ID */
  author: number;
  /** 内容 */
  content: string;
  /** 摘要 */
  excerpt: string;
  /** 模板类型 */
  type: string;
  /** 状态 */
  status: string;
  /** 排序 */
  order: number;
  /** 父模板ID */
  parent?: number | undefined;
  /** 评论状态 */
  commentStatus: string;
  /** 评论数量 */
  commentCount: number;
  /** 创建时间 */
  createdAt: Date;
  /** 更新时间 */
  updatedAt: Date;
}

/** 获取模板请求 */
export interface GetTemplateRequest {
  /** 模板ID */
  id: number;
  /** 模板类型 */
  type?: string | undefined;
  /** 需要返回的字段列表 */
  fields: string[];
  /** 请求用户ID（权限控制） */
  requestUserId?: number | undefined;
}

/** 根据名称获取模板请求 */
export interface GetTemplateByNameRequest {
  /** 模板名称 */
  name: string;
  /** 模板类型 */
  type?: string | undefined;
  /** 需要返回的字段列表 */
  fields: string[];
  /** 请求用户ID（权限控制） */
  requestUserId?: number | undefined;
}

/** 获取模板响应 */
export interface GetTemplateResponse {
  /** 模板信息 */
  template?: TemplateModel | undefined;
}

/** 获取模板名称列表请求 */
export interface GetTemplateNamesRequest {
  /** 模板类型 */
  type: string;
}

/** 获取模板名称列表响应 */
export interface GetTemplateNamesResponse {
  /** 名称列表 */
  names: string[];
}

/** 获取模板选项请求 */
export interface GetTemplateOptionsRequest {
  /** 分页偏移量 */
  offset?: number | undefined;
  /** 每页数量限制 */
  limit?: number | undefined;
  /** 模板类型 */
  type: string;
  /** 关键字搜索 */
  keyword?: string | undefined;
  /** 搜索字段 */
  keywordField?: string | undefined;
  /** 作者筛选 */
  author?: number | undefined;
  /** 日期筛选 */
  date?: string | undefined;
  /** 分类筛选列表 */
  taxonomies: GetTemplateOptionsRequestTaxonomy[];
  /** 需要返回的字段列表（默认返回id和title） */
  fields: string[];
}

/** 分类筛选 */
export interface GetTemplateOptionsRequestTaxonomy {
  /** 分类类型 */
  type: string;
  /** 分类名称 */
  name?: string | undefined;
  /** 分类ID */
  id?: number | undefined;
}

/** 获取模板选项响应 */
export interface GetTemplateOptionsResponse {
  /** 选项列表 */
  options: GetTemplateOptionsResponseTemplateOption[];
}

/** 模板选项信息 */
export interface GetTemplateOptionsResponseTemplateOption {
  /** 模板ID */
  id: number;
  /** 标题 */
  title: string;
  /** 名称 */
  name: string;
}

/** 分页获取模板请求 */
export interface GetPagedTemplateRequest {
  /** 分页偏移量 */
  offset?: number | undefined;
  /** 每页数量限制 */
  limit?: number | undefined;
  /** 模板类型 */
  type: string;
  /** 关键字搜索 */
  keyword?: string | undefined;
  /** 搜索字段 */
  keywordField?: string | undefined;
  /** 作者筛选 */
  author?: number | undefined;
  /** 日期筛选 */
  date?: string | undefined;
  /** 状态筛选 */
  status?: string | undefined;
  /** 分类筛选列表 */
  taxonomies: GetPagedTemplateRequestTaxonomy[];
  /** 需要返回的字段列表 */
  fields: string[];
  /** 请求用户ID（权限控制） */
  requestUserId?: number | undefined;
}

/** 分类筛选 */
export interface GetPagedTemplateRequestTaxonomy {
  /** 分类类型 */
  type: string;
  /** 分类名称 */
  name?: string | undefined;
  /** 分类ID */
  id?: number | undefined;
}

/** 分页获取模板响应 */
export interface GetPagedTemplateResponse {
  /** 模板列表 */
  rows: TemplateModel[];
  /** 总数量 */
  total: number;
}

/** 获取个人模板数量请求 */
export interface GetTemplateSelfCountRequest {
  /** 模板类型 */
  type: string;
  /** 是否包含回收站状态 */
  includeTrashStatus: boolean;
  /** 请求用户ID */
  requestUserId: number;
}

/** 获取个人模板数量响应 */
export interface GetTemplateSelfCountResponse {
  /** 模板总数 */
  counts: number;
}

/** 获取每日模板数量请求 */
export interface GetTemplateCountByDayRequest {
  /** 模板类型 */
  type: string;
  /** 月份（格式：YYYY-MM） */
  month: string;
}

/** 获取每日模板数量响应 */
export interface GetTemplateCountByDayResponse {
  /** 每日统计列表 */
  counts: GetTemplateCountByDayResponseCounts[];
}

/** 日期计数信息 */
export interface GetTemplateCountByDayResponseCounts {
  /** 日期（格式：YYYY-MM-DD） */
  day: string;
  /** 数量 */
  count: number;
}

/** 获取每月模板数量请求 */
export interface GetTemplateCountByMonthRequest {
  /** 模板类型 */
  type: string;
  /** 年份（可选，格式：YYYY） */
  year?: string | undefined;
  /** 最近几个月（默认12个月） */
  months?: number | undefined;
}

/** 获取每月模板数量响应 */
export interface GetTemplateCountByMonthResponse {
  /** 每月统计列表 */
  counts: GetTemplateCountByMonthResponseCounts[];
}

/** 月份计数信息 */
export interface GetTemplateCountByMonthResponseCounts {
  /** 月份（格式：YYYY-MM） */
  month: string;
  /** 数量 */
  count: number;
}

/** 获取每年模板数量请求 */
export interface GetTemplateCountByYearRequest {
  /** 模板类型 */
  type: string;
}

/** 获取每年模板数量响应 */
export interface GetTemplateCountByYearResponse {
  /** 每年统计列表 */
  counts: GetTemplateCountByYearResponseCounts[];
}

/** 年份计数信息 */
export interface GetTemplateCountByYearResponseCounts {
  /** 年份（格式：YYYY） */
  year: string;
  /** 数量 */
  count: number;
}

/** 获取各状态模板数量请求 */
export interface GetTemplateCountByStatusRequest {
  /** 模板类型 */
  type: string;
  /** 请求用户ID */
  requestUserId: number;
}

/** 获取各状态模板数量响应 */
export interface GetTemplateCountByStatusResponse {
  /** 状态统计列表 */
  counts: GetTemplateCountByStatusResponseCounts[];
}

/** 状态计数信息 */
export interface GetTemplateCountByStatusResponseCounts {
  /** 状态 */
  status: string;
  /** 数量 */
  count: number;
}

/** 获取修订版本数量响应 */
export interface GetTemplateRevisionCountResponse {
  /** 修订版本总数 */
  counts: number;
}

/** 获取修订版本列表请求 */
export interface GetTemplateRevisionsRquest {
  /** 模板ID */
  id: number;
  /** 需要返回的字段列表 */
  fields: string[];
  /** 请求用户ID */
  requestUserId: number;
}

/** 获取修订版本列表响应 */
export interface GetTemplateRevisionsResponse {
  /** 修订版本列表 */
  revisions: TemplateModel[];
}

/** 创建模板请求 */
export interface CreateTemplateRequest {
  /** 模板名称 */
  name?: string | undefined;
  /** 标题 */
  title?: string | undefined;
  /** 内容 */
  content?: string | undefined;
  /** 摘要 */
  excerpt: string;
  /** 类型 */
  type: string;
  /** 状态 */
  status?: string | undefined;
  /** 评论状态 */
  commentStatus?: string | undefined;
  /** 元数据列表 */
  metas: CreateMetaRequest[];
  /** 请求用户ID */
  requestUserId: number;
}

/** 创建预设类型模板请求 */
export interface CreatePresetTypeTemplateRequest {
  /** 模板名称 */
  name?: string | undefined;
  /** 标题 */
  title?: string | undefined;
  /** 内容 */
  content?: string | undefined;
  /** 摘要（仅用于文章类型） */
  excerpt?: string | undefined;
  /** 状态 */
  status?: string | undefined;
  /** 评论状态 */
  commentStatus?: string | undefined;
  /** 元数据列表 */
  metas: CreateMetaRequest[];
  /** 请求用户ID */
  requestUserId: number;
}

/** 创建模板响应 */
export interface CreateTemplateResponse {
  /** 创建的模板信息 */
  template: TemplateModel;
}

/** 更新模板请求 */
export interface UpdateTemplateRequest {
  /** 模板ID */
  id: number;
  /** 名称 */
  name?: string | undefined;
  /** 标题 */
  title?: string | undefined;
  /** 内容 */
  content?: string | undefined;
  /** 摘要 */
  excerpt?: string | undefined;
  /** 状态 */
  status?: string | undefined;
  /** 评论状态 */
  commentStatus?: string | undefined;
  /** 请求用户ID */
  requestUserId: number;
}

/** 更新模板状态请求 */
export interface UpdateTemplateStatusRequest {
  /** 模板ID */
  id: number;
  /** 新状态 */
  status: string;
  /** 请求用户ID */
  requestUserId: number;
}

/** 批量更新模板状态请求 */
export interface BulkUpdateTemplateStatusRequest {
  /** 模板ID列表 */
  ids: number[];
  /** 新状态 */
  status: string;
  /** 请求用户ID */
  requestUserId: number;
}

/** 更新评论数量请求 */
export interface UpdateCommentCountRequest {
  /** 模板ID */
  id: number;
  /** 新的评论数量 */
  count: number;
}

/** 更新模板名称请求 */
export interface UpdateTemplateNameRequest {
  /** 模板ID */
  id: number;
  /** 新名称 */
  name: string;
  /** 请求用户ID */
  requestUserId: number;
}

/** 恢复模板请求 */
export interface RestoreTemplateRequest {
  /** 模板ID */
  id: number;
  /** 请求用户ID */
  requestUserId: number;
}

/** 批量恢复模板请求 */
export interface BulkRestoreTemplateRequest {
  /** 模板ID列表 */
  ids: number[];
  /** 请求用户ID */
  requestUserId: number;
}

/** 删除模板请求 */
export interface DeleteTemplateRequest {
  /** 模板ID */
  id: number;
  /** 请求用户ID */
  requestUserId: number;
}

/** 批量删除模板请求 */
export interface BulkDeleteTemplateRequest {
  /** 模板ID列表 */
  ids: number[];
  /** 请求用户ID */
  requestUserId: number;
}

/** 模板元数据模型 */
export interface TemplateMetaModel {
  /** 元数据ID */
  id: number;
  /** 模板ID */
  templateId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 元数据值 */
  metaValue?: string | undefined;
}

/** 获取模板元数据响应 */
export interface GetTemplateMetaResponse {
  /** 元数据信息 */
  meta?: TemplateMetaModel | undefined;
}

/** 获取模板元数据列表请求 */
export interface GetTemplateMetasRequest {
  /** 单个模板ID */
  templateId?: number | undefined;
  /** 多个模板ID列表 */
  templateIds?: GetTemplateMetasRequestTemplateIds | undefined;
  /** 要获取的元数据键名列表 */
  metaKeys: string[];
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 模板ID列表包装 */
export interface GetTemplateMetasRequestTemplateIds {
  /** 模板ID列表 */
  value: number[];
}

/** 获取模板元数据列表响应 */
export interface GetTemplateMetasResponse {
  /** 元数据列表 */
  metas: TemplateMetaModel[];
}

/** 创建模板元数据请求 */
export interface CreateTemplateMetaRequest {
  /** 模板ID */
  templateId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 元数据值 */
  metaValue?: string | undefined;
}

/** 创建模板元数据响应 */
export interface CreateTemplateMetaResponse {
  /** 创建的元数据信息 */
  meta: TemplateMetaModel;
}

/** 批量创建模板元数据请求 */
export interface CreateTemplateMetasRequest {
  /** 模板ID */
  templateId: number;
  /** 要创建的元数据列表 */
  metas: TemplateMetaModel[];
}

/** 批量创建模板元数据响应 */
export interface CreateTemplateMetasResponse {
  /** 创建的元数据列表 */
  metas: TemplateMetaModel[];
}

/** 通过键名更新模板元数据请求 */
export interface UpdateTemplateMetaByKeyRequest {
  /** 模板ID */
  templateId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 新的元数据值 */
  metaValue: string;
  /** 如果不存在是否创建 */
  createIfNotExist?: boolean | undefined;
}

/** 通过键名删除模板元数据请求 */
export interface DeleteTemplateMetaByKeyRequest {
  /** 模板ID */
  templateId: number;
  /** 要删除的元数据键名 */
  metaKey: string;
}

export const POMELO_SERVICE_PACKAGE_NAME = 'pomelo.service';

wrappers['.google.protobuf.Timestamp'] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

/** 模板服务接口定义 */

export interface TemplateServiceClient {
  /** 获取单个模板 */

  get(request: GetTemplateRequest, ...rest: any): Observable<GetTemplateResponse>;

  /** 根据名称获取模板 */

  getByName(request: GetTemplateByNameRequest, ...rest: any): Observable<GetTemplateResponse>;

  /** 获取模板选项列表 */

  getOptions(request: GetTemplateOptionsRequest, ...rest: any): Observable<GetTemplateOptionsResponse>;

  /** 获取模板名称列表 */

  getNames(request: GetTemplateNamesRequest, ...rest: any): Observable<GetTemplateNamesResponse>;

  /** 获取个人模板数量 */

  getSelfCount(request: GetTemplateSelfCountRequest, ...rest: any): Observable<GetTemplateSelfCountResponse>;

  /** 获取每日模板数量 */

  getCountByDay(request: GetTemplateCountByDayRequest, ...rest: any): Observable<GetTemplateCountByDayResponse>;

  /** 获取每月模板数量 */

  getCountByMonth(request: GetTemplateCountByMonthRequest, ...rest: any): Observable<GetTemplateCountByMonthResponse>;

  /** 获取每年模板数量 */

  getCountByYear(request: GetTemplateCountByYearRequest, ...rest: any): Observable<GetTemplateCountByYearResponse>;

  /** 获取各状态模板数量 */

  getCountByStatus(
    request: GetTemplateCountByStatusRequest,
    ...rest: any
  ): Observable<GetTemplateCountByStatusResponse>;

  /** 分页获取模板列表 */

  getPaged(request: GetPagedTemplateRequest, ...rest: any): Observable<GetPagedTemplateResponse>;

  /** 获取修订版本数量 */

  getRevisionCount(request: IdRequest, ...rest: any): Observable<GetTemplateRevisionCountResponse>;

  /** 获取修订版本列表 */

  getRevisions(request: GetTemplateRevisionsRquest, ...rest: any): Observable<GetTemplateRevisionsResponse>;

  /** 创建新模板 */

  create(request: CreateTemplateRequest, ...rest: any): Observable<CreateTemplateResponse>;

  /** 创建表单模板 */

  createForm(request: CreatePresetTypeTemplateRequest, ...rest: any): Observable<CreateTemplateResponse>;

  /** 创建页面模板 */

  createPage(request: CreatePresetTypeTemplateRequest, ...rest: any): Observable<CreateTemplateResponse>;

  /** 创建文章模板 */

  createPost(request: CreatePresetTypeTemplateRequest, ...rest: any): Observable<CreateTemplateResponse>;

  /** 更新模板 */

  update(request: UpdateTemplateRequest, ...rest: any): Observable<Empty>;

  /** 更新模板名称 */

  updateName(request: UpdateTemplateNameRequest, ...rest: any): Observable<Empty>;

  /** 更新模板状态 */

  updateStatus(request: UpdateTemplateStatusRequest, ...rest: any): Observable<Empty>;

  /** 批量更新模板状态 */

  bulkUpdateStatus(request: BulkUpdateTemplateStatusRequest, ...rest: any): Observable<Empty>;

  /** 更新评论数量 */

  updateCommentCount(request: UpdateCommentCountRequest, ...rest: any): Observable<Empty>;

  /** 恢复模板 */

  restore(request: RestoreTemplateRequest, ...rest: any): Observable<Empty>;

  /** 批量恢复模板 */

  bulkRestore(request: BulkRestoreTemplateRequest, ...rest: any): Observable<Empty>;

  /** 删除模板 */

  delete(request: DeleteTemplateRequest, ...rest: any): Observable<Empty>;

  /** 批量删除模板 */

  bulkDelete(request: BulkDeleteTemplateRequest, ...rest: any): Observable<Empty>;

  /** 获取元数据 */

  getMeta(request: GetMetaRequest, ...rest: any): Observable<GetTemplateMetaResponse>;

  /** 获取元数据列表 */

  getMetas(request: GetTemplateMetasRequest, ...rest: any): Observable<GetTemplateMetasResponse>;

  /** 创建元数据 */

  createMeta(request: CreateTemplateMetaRequest, ...rest: any): Observable<CreateTemplateMetaResponse>;

  /** 批量创建元数据 */

  createMetas(request: CreateTemplateMetasRequest, ...rest: any): Observable<CreateTemplateMetasResponse>;

  /** 更新元数据 */

  updateMeta(request: UpdateMetaRequest, ...rest: any): Observable<Empty>;

  /** 通过键名更新元数据 */

  updateMetaByKey(request: UpdateTemplateMetaByKeyRequest, ...rest: any): Observable<Empty>;

  /** 删除元数据 */

  deleteMeta(request: DeleteMetaRequest, ...rest: any): Observable<Empty>;

  /** 通过键名删除元数据 */

  deleteMetaByKey(request: DeleteTemplateMetaByKeyRequest, ...rest: any): Observable<Empty>;
}

/** 模板服务接口定义 */

export interface TemplateServiceController {
  /** 获取单个模板 */

  get(
    request: GetTemplateRequest,
    ...rest: any
  ): Promise<GetTemplateResponse> | Observable<GetTemplateResponse> | GetTemplateResponse;

  /** 根据名称获取模板 */

  getByName(
    request: GetTemplateByNameRequest,
    ...rest: any
  ): Promise<GetTemplateResponse> | Observable<GetTemplateResponse> | GetTemplateResponse;

  /** 获取模板选项列表 */

  getOptions(
    request: GetTemplateOptionsRequest,
    ...rest: any
  ): Promise<GetTemplateOptionsResponse> | Observable<GetTemplateOptionsResponse> | GetTemplateOptionsResponse;

  /** 获取模板名称列表 */

  getNames(
    request: GetTemplateNamesRequest,
    ...rest: any
  ): Promise<GetTemplateNamesResponse> | Observable<GetTemplateNamesResponse> | GetTemplateNamesResponse;

  /** 获取个人模板数量 */

  getSelfCount(
    request: GetTemplateSelfCountRequest,
    ...rest: any
  ): Promise<GetTemplateSelfCountResponse> | Observable<GetTemplateSelfCountResponse> | GetTemplateSelfCountResponse;

  /** 获取每日模板数量 */

  getCountByDay(
    request: GetTemplateCountByDayRequest,
    ...rest: any
  ): Promise<GetTemplateCountByDayResponse> | Observable<GetTemplateCountByDayResponse> | GetTemplateCountByDayResponse;

  /** 获取每月模板数量 */

  getCountByMonth(
    request: GetTemplateCountByMonthRequest,
    ...rest: any
  ):
    | Promise<GetTemplateCountByMonthResponse>
    | Observable<GetTemplateCountByMonthResponse>
    | GetTemplateCountByMonthResponse;

  /** 获取每年模板数量 */

  getCountByYear(
    request: GetTemplateCountByYearRequest,
    ...rest: any
  ):
    | Promise<GetTemplateCountByYearResponse>
    | Observable<GetTemplateCountByYearResponse>
    | GetTemplateCountByYearResponse;

  /** 获取各状态模板数量 */

  getCountByStatus(
    request: GetTemplateCountByStatusRequest,
    ...rest: any
  ):
    | Promise<GetTemplateCountByStatusResponse>
    | Observable<GetTemplateCountByStatusResponse>
    | GetTemplateCountByStatusResponse;

  /** 分页获取模板列表 */

  getPaged(
    request: GetPagedTemplateRequest,
    ...rest: any
  ): Promise<GetPagedTemplateResponse> | Observable<GetPagedTemplateResponse> | GetPagedTemplateResponse;

  /** 获取修订版本数量 */

  getRevisionCount(
    request: IdRequest,
    ...rest: any
  ):
    | Promise<GetTemplateRevisionCountResponse>
    | Observable<GetTemplateRevisionCountResponse>
    | GetTemplateRevisionCountResponse;

  /** 获取修订版本列表 */

  getRevisions(
    request: GetTemplateRevisionsRquest,
    ...rest: any
  ): Promise<GetTemplateRevisionsResponse> | Observable<GetTemplateRevisionsResponse> | GetTemplateRevisionsResponse;

  /** 创建新模板 */

  create(
    request: CreateTemplateRequest,
    ...rest: any
  ): Promise<CreateTemplateResponse> | Observable<CreateTemplateResponse> | CreateTemplateResponse;

  /** 创建表单模板 */

  createForm(
    request: CreatePresetTypeTemplateRequest,
    ...rest: any
  ): Promise<CreateTemplateResponse> | Observable<CreateTemplateResponse> | CreateTemplateResponse;

  /** 创建页面模板 */

  createPage(
    request: CreatePresetTypeTemplateRequest,
    ...rest: any
  ): Promise<CreateTemplateResponse> | Observable<CreateTemplateResponse> | CreateTemplateResponse;

  /** 创建文章模板 */

  createPost(
    request: CreatePresetTypeTemplateRequest,
    ...rest: any
  ): Promise<CreateTemplateResponse> | Observable<CreateTemplateResponse> | CreateTemplateResponse;

  /** 更新模板 */

  update(request: UpdateTemplateRequest, ...rest: any): void;

  /** 更新模板名称 */

  updateName(request: UpdateTemplateNameRequest, ...rest: any): void;

  /** 更新模板状态 */

  updateStatus(request: UpdateTemplateStatusRequest, ...rest: any): void;

  /** 批量更新模板状态 */

  bulkUpdateStatus(request: BulkUpdateTemplateStatusRequest, ...rest: any): void;

  /** 更新评论数量 */

  updateCommentCount(request: UpdateCommentCountRequest, ...rest: any): void;

  /** 恢复模板 */

  restore(request: RestoreTemplateRequest, ...rest: any): void;

  /** 批量恢复模板 */

  bulkRestore(request: BulkRestoreTemplateRequest, ...rest: any): void;

  /** 删除模板 */

  delete(request: DeleteTemplateRequest, ...rest: any): void;

  /** 批量删除模板 */

  bulkDelete(request: BulkDeleteTemplateRequest, ...rest: any): void;

  /** 获取元数据 */

  getMeta(
    request: GetMetaRequest,
    ...rest: any
  ): Promise<GetTemplateMetaResponse> | Observable<GetTemplateMetaResponse> | GetTemplateMetaResponse;

  /** 获取元数据列表 */

  getMetas(
    request: GetTemplateMetasRequest,
    ...rest: any
  ): Promise<GetTemplateMetasResponse> | Observable<GetTemplateMetasResponse> | GetTemplateMetasResponse;

  /** 创建元数据 */

  createMeta(
    request: CreateTemplateMetaRequest,
    ...rest: any
  ): Promise<CreateTemplateMetaResponse> | Observable<CreateTemplateMetaResponse> | CreateTemplateMetaResponse;

  /** 批量创建元数据 */

  createMetas(
    request: CreateTemplateMetasRequest,
    ...rest: any
  ): Promise<CreateTemplateMetasResponse> | Observable<CreateTemplateMetasResponse> | CreateTemplateMetasResponse;

  /** 更新元数据 */

  updateMeta(request: UpdateMetaRequest, ...rest: any): void;

  /** 通过键名更新元数据 */

  updateMetaByKey(request: UpdateTemplateMetaByKeyRequest, ...rest: any): void;

  /** 删除元数据 */

  deleteMeta(request: DeleteMetaRequest, ...rest: any): void;

  /** 通过键名删除元数据 */

  deleteMetaByKey(request: DeleteTemplateMetaByKeyRequest, ...rest: any): void;
}

export function TemplateServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'get',
      'getByName',
      'getOptions',
      'getNames',
      'getSelfCount',
      'getCountByDay',
      'getCountByMonth',
      'getCountByYear',
      'getCountByStatus',
      'getPaged',
      'getRevisionCount',
      'getRevisions',
      'create',
      'createForm',
      'createPage',
      'createPost',
      'update',
      'updateName',
      'updateStatus',
      'bulkUpdateStatus',
      'updateCommentCount',
      'restore',
      'bulkRestore',
      'delete',
      'bulkDelete',
      'getMeta',
      'getMetas',
      'createMeta',
      'createMetas',
      'updateMeta',
      'updateMetaByKey',
      'deleteMeta',
      'deleteMetaByKey',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      if (descriptor) {
        GrpcMethod('TemplateService', method)(constructor.prototype[method], method, descriptor);
      }
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod('TemplateService', method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TEMPLATE_SERVICE_NAME = 'TemplateService';
