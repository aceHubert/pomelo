// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: link.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { wrappers } from 'protobufjs';
import { Observable } from 'rxjs';
import { Empty } from './google/protobuf/empty';

export const protobufPackage = 'pomelo.service';

/** 链接模型，表示系统中的链接资源 */
export interface LinkModel {
  /** 链接ID */
  id: number;
  /** 链接地址 */
  url: string;
  /** 链接名称 */
  name: string;
  /** 链接图片 */
  image: string;
  /** 打开方式 (_blank, _self) */
  target: string;
  /** 链接描述 */
  description: string;
  /** 是否显示 (yes/no) */
  visible: string;
  /** 创建者ID */
  userId: number;
  /** 链接关系属性 */
  rel?: string | undefined;
  /** RSS地址 */
  rss?: string | undefined;
  /** 创建时间 */
  createdAt: Date;
  /** 更新时间 */
  updatedAt: Date;
}

/** 获取链接请求 */
export interface GetLinkRequest {
  /** 链接ID */
  id: number;
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 获取链接响应 */
export interface GetLinkResponse {
  /** 链接信息 */
  link?: LinkModel | undefined;
}

/** 分页获取链接请求 */
export interface GetPagedLinkRequest {
  /** 分页偏移量 */
  offset?: number | undefined;
  /** 每页数量限制 */
  limit?: number | undefined;
  /** 关键字搜索 */
  keyword?: string | undefined;
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 分页获取链接响应 */
export interface GetPagedLinkResponse {
  /** 链接列表 */
  rows: LinkModel[];
  /** 总数量 */
  total: number;
}

/** 创建链接请求 */
export interface CreateLinkRequest {
  /** 链接地址 */
  url: string;
  /** 链接名称 */
  name: string;
  /** 链接图片 */
  image: string;
  /** 打开方式 */
  target: string;
  /** 链接描述 */
  description: string;
  /** 是否显示 */
  visible: string;
  /** 链接关系属性 */
  rel?: string | undefined;
  /** RSS地址 */
  rss?: string | undefined;
  /** 请求用户ID */
  requestUserId: number;
}

/** 创建链接响应 */
export interface CreateLinkResponse {
  /** 创建的链接信息 */
  link: LinkModel;
}

/** 更新链接请求 */
export interface UpdateLinkRequest {
  /** 链接ID */
  id: number;
  /** 链接名称 */
  name?: string | undefined;
  /** 链接图片 */
  image?: string | undefined;
  /** 打开方式 */
  target?: string | undefined;
  /** 链接描述 */
  description?: string | undefined;
  /** 是否显示 */
  visible?: string | undefined;
  /** 链接关系属性 */
  rel?: string | undefined;
  /** RSS地址 */
  rss?: string | undefined;
  /** 请求用户ID */
  requestUserId: number;
}

/** 删除链接请求 */
export interface DeleteLinkRequest {
  /** 链接ID */
  id: number;
  /** 请求用户ID */
  requestUserId: number;
}

export const POMELO_SERVICE_PACKAGE_NAME = 'pomelo.service';

wrappers['.google.protobuf.Timestamp'] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

/** 链接服务接口定义 */

export interface LinkServiceClient {
  /** 获取单个链接 */

  get(request: GetLinkRequest, ...rest: any): Observable<GetLinkResponse>;

  /** 分页获取链接列表 */

  getPaged(request: GetPagedLinkRequest, ...rest: any): Observable<GetPagedLinkResponse>;

  /** 创建新链接 */

  create(request: CreateLinkRequest, ...rest: any): Observable<CreateLinkResponse>;

  /** 更新链接 */

  update(request: UpdateLinkRequest, ...rest: any): Observable<Empty>;

  /** 删除链接 */

  delete(request: DeleteLinkRequest, ...rest: any): Observable<Empty>;
}

/** 链接服务接口定义 */

export interface LinkServiceController {
  /** 获取单个链接 */

  get(request: GetLinkRequest, ...rest: any): Promise<GetLinkResponse> | Observable<GetLinkResponse> | GetLinkResponse;

  /** 分页获取链接列表 */

  getPaged(
    request: GetPagedLinkRequest,
    ...rest: any
  ): Promise<GetPagedLinkResponse> | Observable<GetPagedLinkResponse> | GetPagedLinkResponse;

  /** 创建新链接 */

  create(
    request: CreateLinkRequest,
    ...rest: any
  ): Promise<CreateLinkResponse> | Observable<CreateLinkResponse> | CreateLinkResponse;

  /** 更新链接 */

  update(request: UpdateLinkRequest, ...rest: any): void;

  /** 删除链接 */

  delete(request: DeleteLinkRequest, ...rest: any): void;
}

export function LinkServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['get', 'getPaged', 'create', 'update', 'delete'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      if (descriptor) {
        GrpcMethod('LinkService', method)(constructor.prototype[method], method, descriptor);
      }
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod('LinkService', method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LINK_SERVICE_NAME = 'LinkService';
