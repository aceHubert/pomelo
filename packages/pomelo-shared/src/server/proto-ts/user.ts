// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { wrappers } from 'protobufjs';
import { Observable } from 'rxjs';
import { CreateMetaRequest, DeleteMetaRequest, GetMetaRequest, UpdateMetaRequest } from './common/meta';
import { RequestUserIdRequest } from './common/shared';
import { Empty } from './google/protobuf/empty';
import { BoolValue } from './google/protobuf/wrappers';

export const protobufPackage = 'pomelo.service';

/** 用户相关枚举和常量定义 */
export interface User {}

/** 用户状态枚举 */
export enum UserStatus {
  /** Disabled - 禁用状态 */
  Disabled = 0,
  /** Enabled - 启用状态 */
  Enabled = 1,
}

/** 用户模型，包含用户的基本信息 */
export interface UserModel {
  /** 用户ID */
  id: number;
  /** 登录名称 */
  loginName: string;
  /** 昵称 */
  niceName: string;
  /** 显示名称 */
  displayName: string;
  /** 手机号码 */
  mobile?: string | undefined;
  /** 电子邮件 */
  email?: string | undefined;
  /** 个人网址 */
  url: string;
  /** 用户状态 */
  status: UserStatus;
  /** 创建时间 */
  createdAt: Date;
  /** 更新时间 */
  updatedAt: Date;
}

/** 获取用户请求，可以通过ID或用户名获取 */
export interface GetUserRequest {
  /** 用户ID */
  id?: number | undefined;
  /** 用户名 */
  username?: string | undefined;
  /** 需要返回的字段列表 */
  fields: string[];
  /** 请求用户ID（用于权限控制） */
  requestUserId: number;
}

/** 获取用户响应 */
export interface GetUserResponse {
  /** 用户信息 */
  user?: UserModel | undefined;
}

/** 获取请求用户请求，用于获取当前请求者的用户信息 */
export interface GetRequestUserRequest {
  /** 用户ID */
  id?: number | undefined;
  /** 用户名 */
  username?: string | undefined;
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 获取请求用户响应 */
export interface GetRequestUserResponse {
  /** 用户信息 */
  user?: UserModel | undefined;
}

/** 获取用户特定字段请求 */
export interface GetSpecificFieldUserRequest {
  /** 用户ID */
  id?: number | undefined;
  /** 用户名 */
  username?: string | undefined;
}

/** 获取用户电子邮件响应 */
export interface GetUserEmailResponse {
  /** 用户电子邮件 */
  user?: GetUserEmailResponseUserEmail | undefined;
}

/** 用户电子邮件信息 */
export interface GetUserEmailResponseUserEmail {
  /** 用户ID */
  id: number;
  /** 电子邮件地址 */
  email?: string | undefined;
}

/** 获取用户手机号码响应 */
export interface GetUserMobileResponse {
  /** 用户手机号码 */
  user?: GetUserMobileResponseUserMobile | undefined;
}

/** 用户手机号码信息 */
export interface GetUserMobileResponseUserMobile {
  /** 用户ID */
  id: number;
  /** 手机号码 */
  mobile?: string | undefined;
}

/** 获取用户权限请求 */
export interface GetUserCapabilitiesRequest {
  /** 需要获取用户id，需要 requestUserId 有编辑权限 */
  id?: number | undefined;
  /** 请求用户id，如果id为空则作为修改的用户id（即获取本人信息） */
  requestUserId: number;
}

/** 获取用户权限响应 */
export interface GetUserCapabilitiesResponse {
  /** 权限列表 */
  capabilities: string[];
}

/** 检查用户是否拥有特定权限请求 */
export interface HasUserCapabilityRequest {
  /** 需要获取用户id，需要 requestUserId 有编辑权限 */
  id?: number | undefined;
  /** 要检查的权限名称 */
  capability: string;
  /** 请求用户id，如果id为空则作为修改的用户id（即获取本人信息） */
  requestUserId: number;
}

/** 批量获取用户请求 */
export interface GetUsersRequest {
  /** 用户ID列表 */
  ids: number[];
  /** 需要返回的字段列表 */
  fields: string[];
  /** 请求用户ID（用于权限控制） */
  requestUserId: number;
}

/** 批量获取用户响应 */
export interface GetUsersResponse {
  /** 用户列表 */
  users: UserModel[];
}

/** 分页获取用户请求 */
export interface GetPagedUserRequest {
  /** 分页偏移量 */
  offset?: number | undefined;
  /** 每页数量限制 */
  limit?: number | undefined;
  /** 关键字搜索 */
  keyword?: string | undefined;
  /** 按状态筛选 */
  status?: UserStatus | undefined;
  /** 按权限筛选 */
  capabilities?: string | undefined;
  /** 需要返回的字段列表 */
  fields: string[];
  /** 请求用户ID（用于权限控制） */
  requestUserId: number;
}

/** 分页获取用户响应 */
export interface GetPagedUserResponse {
  /** 用户列表 */
  rows: UserModel[];
  /** 总数量 */
  total: number;
}

/** 获取用户状态统计响应 */
export interface GetUserCountByStatusResponse {
  /** 各状态统计列表 */
  counts: GetUserCountByStatusResponseCounts[];
}

/** 状态计数信息 */
export interface GetUserCountByStatusResponseCounts {
  /** 用户状态 */
  status: UserStatus;
  /** 该状态的用户数量 */
  count: number;
}

/** 获取用户角色统计响应 */
export interface GetUserCountByRoleResponse {
  /** 各角色统计列表 */
  counts: GetUserCountByRoleResponseCounts[];
}

/** 角色计数信息 */
export interface GetUserCountByRoleResponseCounts {
  /** 用户角色 */
  userRole: string;
  /** 该角色的用户数量 */
  count: number;
}

/** 检查登录名是否存在请求 */
export interface IsLoginNameExistsRequest {
  /** 登录名 */
  loginName: string;
}

/** 检查手机号是否存在请求 */
export interface IsMobileExistsRequest {
  /** 手机号码 */
  mobile: string;
}

/** 检查邮箱是否存在请求 */
export interface IsEmailExistsRequest {
  /** 电子邮件 */
  email: string;
}

/** 创建用户请求 */
export interface CreateUserRequest {
  /** 登录名称 */
  loginName: string;
  /** 登录密码（MD5加密） */
  loginPwd: string;
  /** 昵称 */
  niceName: string;
  /** 显示名称 */
  displayName: string;
  /** 手机号码 */
  mobile?: string | undefined;
  /** 电子邮件 */
  email?: string | undefined;
  /** 个人网址 */
  url: string;
  /** 用户状态 */
  status?: UserStatus | undefined;
  /** 名 */
  firstName?: string | undefined;
  /** 姓 */
  lastName?: string | undefined;
  /** 头像 */
  avator?: string | undefined;
  /** 个人描述 */
  description?: string | undefined;
  /** 管理界面颜色主题 */
  adminColor?: string | undefined;
  /** 语言区域设置 */
  locale?: string | undefined;
  /** 用户权限 */
  capabilities?: string | undefined;
  /** 用户元数据 */
  metas: CreateMetaRequest[];
  /** 请求用户ID（创建者ID） */
  requestUserId: number;
}

/** 创建用户响应 */
export interface CreateUserResponse {
  /** 创建的用户信息 */
  user: UserModel;
}

/** 更新用户请求 */
export interface UpdateUserRequest {
  /** 需要修改用户id，需要 requestUserId 有编辑权限 */
  id?: number | undefined;
  /** 显示名称 */
  displayName?: string | undefined;
  /** 个人网址 */
  url?: string | undefined;
  /** 用户状态 */
  status?: UserStatus | undefined;
  /** 名 */
  firstName?: string | undefined;
  /** 姓 */
  lastName?: string | undefined;
  /** 昵称 */
  nickName?: string | undefined;
  /** 头像 */
  avator?: string | undefined;
  /** 个人描述 */
  description?: string | undefined;
  /** 管理界面颜色主题 */
  adminColor?: string | undefined;
  /** 语言区域设置 */
  locale?: string | undefined;
  /** 用户权限 */
  capabilities?: string | undefined;
  /** 请求用户id，如果id为空则作为修改的用户id，并且状态、权限配置不可修改 */
  requestUserId: number;
}

/** 更新用户邮箱请求 */
export interface UpdateUserEmailRequest {
  /** 需要修改用户id，需要 requestUserId 有编辑权限 */
  id?: number | undefined;
  /** 新的电子邮件 */
  email: string;
  /** 请求用户id，如果id为空则作为修改的用户id（即修改本人信息） */
  requestUserId: number;
}

/** 更新用户手机号码请求 */
export interface UpdateUserMobileRequest {
  /** 需要修改用户id，需要 requestUserId 有编辑权限 */
  id?: number | undefined;
  /** 新的手机号码 */
  mobile: string;
  /** 请求用户id，如果id为空则作为修改的用户id（即修改本人信息） */
  requestUserId: number;
}

/** 更新用户状态请求 */
export interface UpdateUserStatusRequest {
  /** 修改用户id，需要 requestUserId 有编辑权限 */
  id: number;
  /** 新的用户状态 */
  status: UserStatus;
  /** 请求用户id */
  requestUserId: number;
}

/** 更新登录密码请求 */
export interface UpdateLoginPwdRequest {
  /** 用户ID */
  id?: number | undefined;
  /** 用户名 */
  username?: string | undefined;
  /** 旧密码（MD5加密） */
  oldPwd: string;
  /** 新密码（MD5加密） */
  newPwd: string;
}

/** 重置登录密码请求 */
export interface ResetLoginPwdRequest {
  /** 需要修改用户id，需要 requestUserId 有编辑权限 */
  id?: number | undefined;
  /** 新密码（MD5加密） */
  newPwd: string;
  /** 请求用户id，如果id为空则作为修改的用户id（即修改本人信息） */
  requestUserId: number;
}

/** 验证用户请求 */
export interface VerifyUserRequest {
  /** 用户名 */
  username: string;
  /** 密码（MD5加密） */
  password: string;
}

/** 验证用户响应 */
export interface VerifyUserResponse {
  /** 验证是否成功 */
  verified: boolean;
  /** 用户信息（验证成功时返回） */
  user?: UserModel | undefined;
}

/** 删除用户请求 */
export interface DeleteUserRequest {
  /** 要删除的用户ID */
  id: number;
  /** 请求用户ID（用于权限控制） */
  requestUserId: number;
}

/** 批量删除用户请求 */
export interface BulkDeleteUserRequest {
  /** 要删除的用户ID列表 */
  ids: number[];
  /** 请求用户ID（用于权限控制） */
  requestUserId: number;
}

/** 用户元数据模型 */
export interface UserMetaModel {
  /** 元数据ID */
  id: number;
  /** 用户ID */
  userId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 元数据值 */
  metaValue?: string | undefined;
}

/** 获取用户元数据响应 */
export interface GetUserMetaResponse {
  /** 元数据信息 */
  meta?: UserMetaModel | undefined;
}

/** 获取用户元数据列表请求 */
export interface GetUserMetasRequest {
  /** 单个用户ID */
  userId?: number | undefined;
  /** 多个用户ID列表 */
  userIds?: GetUserMetasRequestUserIds | undefined;
  /** 要获取的元数据键名列表 */
  metaKeys: string[];
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 用户ID列表包装 */
export interface GetUserMetasRequestUserIds {
  /** 用户ID列表 */
  value: number[];
}

/** 获取用户元数据列表响应 */
export interface GetUserMetasResponse {
  /** 元数据列表 */
  metas: UserMetaModel[];
}

/** 创建用户元数据请求 */
export interface CreateUserMetaRequest {
  /** 用户ID */
  userId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 元数据值 */
  metaValue?: string | undefined;
}

/** 创建用户元数据响应 */
export interface CreateUserMetaResponse {
  /** 创建的元数据信息 */
  meta: UserMetaModel;
}

/** 批量创建用户元数据请求 */
export interface CreateUserMetasRequest {
  /** 用户ID */
  userId: number;
  /** 要创建的元数据列表 */
  metas: UserMetaModel[];
}

/** 批量创建用户元数据响应 */
export interface CreateUserMetasResponse {
  /** 创建的元数据列表 */
  metas: UserMetaModel[];
}

/** 通过键名更新用户元数据请求 */
export interface UpdateUserMetaByKeyRequest {
  /** 用户ID */
  userId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 新的元数据值 */
  metaValue: string;
  /** 如果不存在是否创建 */
  createIfNotExist?: boolean | undefined;
}

/** 通过键名删除用户元数据请求 */
export interface DeleteUserMetaByKeyRequest {
  /** 用户ID */
  userId: number;
  /** 要删除的元数据键名 */
  metaKey: string;
}

export const POMELO_SERVICE_PACKAGE_NAME = 'pomelo.service';

wrappers['.google.protobuf.Timestamp'] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

/** 用户服务接口定义 */

export interface UserServiceClient {
  getUser(request: GetUserRequest, ...rest: any): Observable<GetUserResponse>;

  getRequestUser(request: GetRequestUserRequest, ...rest: any): Observable<GetRequestUserResponse>;

  getEmail(request: GetSpecificFieldUserRequest, ...rest: any): Observable<GetUserEmailResponse>;

  getMobile(request: GetSpecificFieldUserRequest, ...rest: any): Observable<GetUserMobileResponse>;

  getList(request: GetUsersRequest, ...rest: any): Observable<GetUsersResponse>;

  getPaged(request: GetPagedUserRequest, ...rest: any): Observable<GetPagedUserResponse>;

  getCapabilities(request: GetUserCapabilitiesRequest, ...rest: any): Observable<GetUserCapabilitiesResponse>;

  hasCapability(request: HasUserCapabilityRequest, ...rest: any): Observable<BoolValue>;

  getCountByStatus(request: RequestUserIdRequest, ...rest: any): Observable<GetUserCountByStatusResponse>;

  getCountByRole(request: RequestUserIdRequest, ...rest: any): Observable<GetUserCountByRoleResponse>;

  isLoginNameExists(request: IsLoginNameExistsRequest, ...rest: any): Observable<BoolValue>;

  isMobileExists(request: IsMobileExistsRequest, ...rest: any): Observable<BoolValue>;

  isEmailExists(request: IsEmailExistsRequest, ...rest: any): Observable<BoolValue>;

  create(request: CreateUserRequest, ...rest: any): Observable<CreateUserResponse>;

  update(request: UpdateUserRequest, ...rest: any): Observable<Empty>;

  updateEmail(request: UpdateUserEmailRequest, ...rest: any): Observable<Empty>;

  updateMobile(request: UpdateUserMobileRequest, ...rest: any): Observable<Empty>;

  updateStatus(request: UpdateUserStatusRequest, ...rest: any): Observable<Empty>;

  updateLoginPassword(request: UpdateLoginPwdRequest, ...rest: any): Observable<Empty>;

  resetLoginPassword(request: ResetLoginPwdRequest, ...rest: any): Observable<Empty>;

  verifyUser(request: VerifyUserRequest, ...rest: any): Observable<VerifyUserResponse>;

  delete(request: DeleteUserRequest, ...rest: any): Observable<Empty>;

  bulkDelete(request: BulkDeleteUserRequest, ...rest: any): Observable<Empty>;

  /** get meta */

  getMeta(request: GetMetaRequest, ...rest: any): Observable<GetUserMetaResponse>;

  /** get metas */

  getMetas(request: GetUserMetasRequest, ...rest: any): Observable<GetUserMetasResponse>;

  /** create meta */

  createMeta(request: CreateUserMetaRequest, ...rest: any): Observable<CreateUserMetaResponse>;

  /** create metas */

  createMetas(request: CreateUserMetasRequest, ...rest: any): Observable<CreateUserMetasResponse>;

  /** update meta */

  updateMeta(request: UpdateMetaRequest, ...rest: any): Observable<Empty>;

  /** update meta by key */

  updateMetaByKey(request: UpdateUserMetaByKeyRequest, ...rest: any): Observable<Empty>;

  /** delete meta */

  deleteMeta(request: DeleteMetaRequest, ...rest: any): Observable<Empty>;

  /** delete meta by key */

  deleteMetaByKey(request: DeleteUserMetaByKeyRequest, ...rest: any): Observable<Empty>;
}

/** 用户服务接口定义 */

export interface UserServiceController {
  getUser(
    request: GetUserRequest,
    ...rest: any
  ): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  getRequestUser(
    request: GetRequestUserRequest,
    ...rest: any
  ): Promise<GetRequestUserResponse> | Observable<GetRequestUserResponse> | GetRequestUserResponse;

  getEmail(
    request: GetSpecificFieldUserRequest,
    ...rest: any
  ): Promise<GetUserEmailResponse> | Observable<GetUserEmailResponse> | GetUserEmailResponse;

  getMobile(
    request: GetSpecificFieldUserRequest,
    ...rest: any
  ): Promise<GetUserMobileResponse> | Observable<GetUserMobileResponse> | GetUserMobileResponse;

  getList(
    request: GetUsersRequest,
    ...rest: any
  ): Promise<GetUsersResponse> | Observable<GetUsersResponse> | GetUsersResponse;

  getPaged(
    request: GetPagedUserRequest,
    ...rest: any
  ): Promise<GetPagedUserResponse> | Observable<GetPagedUserResponse> | GetPagedUserResponse;

  getCapabilities(
    request: GetUserCapabilitiesRequest,
    ...rest: any
  ): Promise<GetUserCapabilitiesResponse> | Observable<GetUserCapabilitiesResponse> | GetUserCapabilitiesResponse;

  hasCapability(
    request: HasUserCapabilityRequest,
    ...rest: any
  ): Promise<BoolValue> | Observable<BoolValue> | BoolValue;

  getCountByStatus(
    request: RequestUserIdRequest,
    ...rest: any
  ): Promise<GetUserCountByStatusResponse> | Observable<GetUserCountByStatusResponse> | GetUserCountByStatusResponse;

  getCountByRole(
    request: RequestUserIdRequest,
    ...rest: any
  ): Promise<GetUserCountByRoleResponse> | Observable<GetUserCountByRoleResponse> | GetUserCountByRoleResponse;

  isLoginNameExists(
    request: IsLoginNameExistsRequest,
    ...rest: any
  ): Promise<BoolValue> | Observable<BoolValue> | BoolValue;

  isMobileExists(request: IsMobileExistsRequest, ...rest: any): Promise<BoolValue> | Observable<BoolValue> | BoolValue;

  isEmailExists(request: IsEmailExistsRequest, ...rest: any): Promise<BoolValue> | Observable<BoolValue> | BoolValue;

  create(
    request: CreateUserRequest,
    ...rest: any
  ): Promise<CreateUserResponse> | Observable<CreateUserResponse> | CreateUserResponse;

  update(request: UpdateUserRequest, ...rest: any): void;

  updateEmail(request: UpdateUserEmailRequest, ...rest: any): void;

  updateMobile(request: UpdateUserMobileRequest, ...rest: any): void;

  updateStatus(request: UpdateUserStatusRequest, ...rest: any): void;

  updateLoginPassword(request: UpdateLoginPwdRequest, ...rest: any): void;

  resetLoginPassword(request: ResetLoginPwdRequest, ...rest: any): void;

  verifyUser(
    request: VerifyUserRequest,
    ...rest: any
  ): Promise<VerifyUserResponse> | Observable<VerifyUserResponse> | VerifyUserResponse;

  delete(request: DeleteUserRequest, ...rest: any): void;

  bulkDelete(request: BulkDeleteUserRequest, ...rest: any): void;

  /** get meta */

  getMeta(
    request: GetMetaRequest,
    ...rest: any
  ): Promise<GetUserMetaResponse> | Observable<GetUserMetaResponse> | GetUserMetaResponse;

  /** get metas */

  getMetas(
    request: GetUserMetasRequest,
    ...rest: any
  ): Promise<GetUserMetasResponse> | Observable<GetUserMetasResponse> | GetUserMetasResponse;

  /** create meta */

  createMeta(
    request: CreateUserMetaRequest,
    ...rest: any
  ): Promise<CreateUserMetaResponse> | Observable<CreateUserMetaResponse> | CreateUserMetaResponse;

  /** create metas */

  createMetas(
    request: CreateUserMetasRequest,
    ...rest: any
  ): Promise<CreateUserMetasResponse> | Observable<CreateUserMetasResponse> | CreateUserMetasResponse;

  /** update meta */

  updateMeta(request: UpdateMetaRequest, ...rest: any): void;

  /** update meta by key */

  updateMetaByKey(request: UpdateUserMetaByKeyRequest, ...rest: any): void;

  /** delete meta */

  deleteMeta(request: DeleteMetaRequest, ...rest: any): void;

  /** delete meta by key */

  deleteMetaByKey(request: DeleteUserMetaByKeyRequest, ...rest: any): void;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'getUser',
      'getRequestUser',
      'getEmail',
      'getMobile',
      'getList',
      'getPaged',
      'getCapabilities',
      'hasCapability',
      'getCountByStatus',
      'getCountByRole',
      'isLoginNameExists',
      'isMobileExists',
      'isEmailExists',
      'create',
      'update',
      'updateEmail',
      'updateMobile',
      'updateStatus',
      'updateLoginPassword',
      'resetLoginPassword',
      'verifyUser',
      'delete',
      'bulkDelete',
      'getMeta',
      'getMetas',
      'createMeta',
      'createMetas',
      'updateMeta',
      'updateMetaByKey',
      'deleteMeta',
      'deleteMetaByKey',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = getPropertyDescriptorFromChain(constructor, method);
      GrpcMethod('UserService', method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = getPropertyDescriptorFromChain(constructor, method);
      GrpcStreamMethod('UserService', method)(constructor.prototype[method], method, descriptor);
    }
  };

  function getPropertyDescriptorFromChain(obj: any, prop: string) {
    let currentObj = obj;
    while (currentObj !== null) {
      const descriptor = Object.getOwnPropertyDescriptor(currentObj.prototype, prop);
      if (descriptor) {
        return descriptor;
      }
      currentObj = Object.getPrototypeOf(currentObj);
    }
    return;
  }
}

export const USER_SERVICE_NAME = 'UserService';
