// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: option.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Empty } from './google/protobuf/empty';
import { BoolValue } from './google/protobuf/wrappers';

export const protobufPackage = 'pomelo.service';

/** 选项模型，存储系统配置信息 */
export interface OptionModel {
  /** 选项ID */
  id: number;
  /** 选项名称，作为选项的唯一标识 */
  optionName: string;
  /** 选项值，存储实际配置内容 */
  optionValue: string;
  /** 是否自动加载 ("yes"/"no") */
  autoload: string;
}

/** 获取选项请求 */
export interface GetOptionRequest {
  /** 选项ID */
  id: number;
  /** 需要返回的字段 */
  fields: string[];
}

export interface GetOptionByNameRequest {
  /** 选项名称 */
  optionName: string;
  /** 需要返回的字段 */
  fields: string[];
}

/** 获取选项响应 */
export interface GetOptionResponse {
  /** 选项信息 */
  option?: OptionModel | undefined;
}

/** 获取自动加载选项响应 */
export interface GetAutoloadOptionsResponse {
  /** 选项名称与值的映射关系 */
  options: { [key: string]: string };
}

export interface GetAutoloadOptionsResponseOptionsEntry {
  key: string;
  value: string;
}

/** 根据名称获取选项值请求 */
export interface GetOptionValueRequest {
  /** 选项名称 */
  optionName: string;
}

/** 获取选项值响应 */
export interface GetOptionValueResponse {
  /** 选项值 */
  optionValue?: string | undefined;
}

/** 选项名称集合 */
export interface OptionNames {
  /** 选项名称列表 */
  value: string[];
}

/** 获取多个选项请求 */
export interface GetOptionsRequest {
  /** 可以按名称列表或自动加载状态筛选 */
  optionNames?: OptionNames | undefined;
  /** 自动加载状态筛选 */
  autoload?: string | undefined;
  /** 需要返回的字段 */
  fields: string[];
}

/** 获取多个选项响应 */
export interface GetOptionsResponse {
  /** 选项列表 */
  options: OptionModel[];
}

/** 检查选项是否存在请求 */
export interface IsExistRequest {
  /** 选项名称 */
  optionName: string;
}

/** 创建选项请求 */
export interface CreateOptionRequest {
  /** 选项名称 */
  optionName: string;
  /** 选项值 */
  optionValue: string;
  /** 是否自动加载 */
  autoload?: string | undefined;
  /** 请求用户ID */
  requestUserId: number;
}

/** 创建选项响应 */
export interface CreateOptionResponse {
  /** 创建的选项信息 */
  option: OptionModel;
}

/** 更新选项请求 */
export interface UpdateOptionRequest {
  /** 选项ID */
  id: number;
  /** 新的选项值 */
  optionValue: string;
  /** 请求用户ID */
  requestUserId: number;
}

/** 删除选项请求 */
export interface DeleteOptionRequest {
  /** 选项ID */
  id: number;
  /** 请求用户ID */
  requestUserId: number;
}

export const POMELO_SERVICE_PACKAGE_NAME = 'pomelo.service';

/** 选项服务接口定义 */

export interface OptionServiceClient {
  /** 获取单个选项 */

  get(request: GetOptionRequest, ...rest: any): Observable<GetOptionResponse>;

  /** 根据名称获取选项 */

  getByName(request: GetOptionByNameRequest, ...rest: any): Observable<GetOptionResponse>;

  /** 获取所有自动加载的选项 */

  getAutoloads(request: Empty, ...rest: any): Observable<GetAutoloadOptionsResponse>;

  /** 根据名称获取选项值 */

  getValue(request: GetOptionValueRequest, ...rest: any): Observable<GetOptionValueResponse>;

  /** 获取多个选项 */

  getList(request: GetOptionsRequest, ...rest: any): Observable<GetOptionsResponse>;

  /** 检查选项是否存在 */

  isExists(request: IsExistRequest, ...rest: any): Observable<BoolValue>;

  /** 创建新选项 */

  create(request: CreateOptionRequest, ...rest: any): Observable<CreateOptionResponse>;

  /** 更新选项值 */

  update(request: UpdateOptionRequest, ...rest: any): Observable<Empty>;

  /** 重置所有选项 */

  reset(request: Empty, ...rest: any): Observable<Empty>;

  /** 删除选项 */

  delete(request: DeleteOptionRequest, ...rest: any): Observable<Empty>;
}

/** 选项服务接口定义 */

export interface OptionServiceController {
  /** 获取单个选项 */

  get(
    request: GetOptionRequest,
    ...rest: any
  ): Promise<GetOptionResponse> | Observable<GetOptionResponse> | GetOptionResponse;

  /** 根据名称获取选项 */

  getByName(
    request: GetOptionByNameRequest,
    ...rest: any
  ): Promise<GetOptionResponse> | Observable<GetOptionResponse> | GetOptionResponse;

  /** 获取所有自动加载的选项 */

  getAutoloads(
    request: Empty,
    ...rest: any
  ): Promise<GetAutoloadOptionsResponse> | Observable<GetAutoloadOptionsResponse> | GetAutoloadOptionsResponse;

  /** 根据名称获取选项值 */

  getValue(
    request: GetOptionValueRequest,
    ...rest: any
  ): Promise<GetOptionValueResponse> | Observable<GetOptionValueResponse> | GetOptionValueResponse;

  /** 获取多个选项 */

  getList(
    request: GetOptionsRequest,
    ...rest: any
  ): Promise<GetOptionsResponse> | Observable<GetOptionsResponse> | GetOptionsResponse;

  /** 检查选项是否存在 */

  isExists(request: IsExistRequest, ...rest: any): Promise<BoolValue> | Observable<BoolValue> | BoolValue;

  /** 创建新选项 */

  create(
    request: CreateOptionRequest,
    ...rest: any
  ): Promise<CreateOptionResponse> | Observable<CreateOptionResponse> | CreateOptionResponse;

  /** 更新选项值 */

  update(request: UpdateOptionRequest, ...rest: any): void;

  /** 重置所有选项 */

  reset(request: Empty, ...rest: any): void;

  /** 删除选项 */

  delete(request: DeleteOptionRequest, ...rest: any): void;
}

export function OptionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'get',
      'getByName',
      'getAutoloads',
      'getValue',
      'getList',
      'isExists',
      'create',
      'update',
      'reset',
      'delete',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = getPropertyDescriptorFromChain(constructor, method);
      GrpcMethod('OptionService', method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = getPropertyDescriptorFromChain(constructor, method);
      GrpcStreamMethod('OptionService', method)(constructor.prototype[method], method, descriptor);
    }
  };

  function getPropertyDescriptorFromChain(obj: any, prop: string) {
    let currentObj = obj;

    while (currentObj !== null) {
      const descriptor = Object.getOwnPropertyDescriptor(currentObj.prototype, prop);
      if (descriptor) {
        return descriptor;
      }
      currentObj = Object.getPrototypeOf(currentObj);
    }

    return undefined;
  }
}

export const OPTION_SERVICE_NAME = 'OptionService';
