// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: media.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { wrappers } from 'protobufjs';
import { Observable } from 'rxjs';
import { CreateMetaRequest, DeleteMetaRequest, GetMetaRequest } from './common/meta';
import { Empty } from './google/protobuf/empty';
import { Struct } from './google/protobuf/struct';
import { BoolValue } from './google/protobuf/wrappers';

export const protobufPackage = 'pomelo.service';

/** 媒体资源模型，表示系统中的文件和图片资源 */
export interface MediaModel {
  /** 媒体ID */
  id: number;
  /** 存储的文件名 */
  fileName: string;
  /** 原始文件名 */
  originalFileName: string;
  /** 文件扩展名 */
  extension: string;
  /** MIME类型 */
  mimeType: string;
  /** 文件存储路径 */
  path: string;
  /** 上传用户ID */
  userId?: number | undefined;
  /** 媒体元数据信息 */
  metaData?: MediaMetaDataModel | undefined;
  /** 创建时间 */
  createdAt: Date;
}

/** 图片缩略图模型，表示不同尺寸的图片版本 */
export interface ImageScaleModel {
  /** 图片宽度 */
  width: number;
  /** 图片高度 */
  height: number;
  /** 存储路径 */
  path: string;
  /** 缩略图名称 */
  name: string;
}

/** 媒体元数据模型，包含文件和图片的详细信息 */
export interface MediaMetaDataModel {
  /** 文件大小（字节） */
  fileSize: number;
  /** 图片宽度（仅图片类型） */
  width?: number | undefined;
  /** 图片高度（仅图片类型） */
  height?: number | undefined;
  /** 图片缩略图列表（仅图片类型） */
  imageScales: ImageScaleModel[];
  /** 其他元数据信息 */
  otherMetas: { [key: string]: any } | undefined;
}

/** 获取媒体资源请求 */
export interface GetMediaRequest {
  /** 媒体资源ID */
  id: number;
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 根据文件名获取媒体资源请求 */
export interface GetMediaByNameRequest {
  /** 文件名 */
  fileName: string;
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 获取媒体资源响应 */
export interface GetMediaResponse {
  /** 媒体资源信息 */
  media?: MediaModel | undefined;
}

/** 分页获取媒体资源请求 */
export interface GetPagedMediaRequest {
  /** 分页偏移量 */
  offset?: number | undefined;
  /** 每页数量限制 */
  limit?: number | undefined;
  /** 关键字搜索 */
  keyword?: string | undefined;
  /** 文件扩展名过滤 */
  extensions: string[];
  /** MIME类型过滤 */
  mimeTypes: string[];
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 分页获取媒体资源响应 */
export interface GetPagedMediaResponse {
  /** 媒体资源列表 */
  rows: MediaModel[];
  /** 总数量 */
  total: number;
}

/** 检查媒体文件是否存在请求 */
export interface IsMediaExistRequest {
  /** 文件名 */
  fileName: string;
}

/** 媒体元数据创建请求 */
export interface MediaMetaDataRequest {
  /** 文件大小（字节） */
  fileSize: number;
  /** 图片宽度（仅图片类型） */
  width?: number | undefined;
  /** 图片高度（仅图片类型） */
  height?: number | undefined;
}

/** 创建媒体资源请求 */
export interface CreateMediaRequest {
  /** 文件名 */
  fileName: string;
  /** 原始文件名 */
  originalFileName: string;
  /** 文件扩展名 */
  extension: string;
  /** MIME类型 */
  mimeType: string;
  /** 文件存储路径 */
  path: string;
  /** 媒体元数据信息 */
  metaData: MediaMetaDataRequest;
  /** 媒体元数据列表 */
  metas: CreateMetaRequest[];
  /** 请求用户ID */
  requestUserId: number;
}

/** 创建媒体资源响应 */
export interface CreateMediaResponse {
  /** 创建的媒体资源信息 */
  media: MediaModel;
  /** 媒体元数据 */
  metaData: MediaMetaDataModel;
  /** 元数据列表 */
  metas: MediaMetaModel[];
}

/** 更新媒体资源请求 */
export interface UpdateMediaRequest {
  /** 媒体资源ID */
  id: number;
  /** 文件名 */
  fileName?: string | undefined;
  /** 原始文件名 */
  originalFileName?: string | undefined;
  /** 文件扩展名 */
  extension?: string | undefined;
  /** MIME类型 */
  mimeType?: string | undefined;
  /** 文件存储路径 */
  path?: string | undefined;
  /** 媒体元数据信息 */
  metaData?: MediaMetaDataRequest | undefined;
  /** 请求用户ID */
  requestUserId: number;
}

/** 更新媒体元数据请求 */
export interface UpdateMediaMetaDataRequest {
  /** 媒体资源ID */
  id: number;
  /** 媒体元数据信息 */
  metaData: MediaMetaDataRequest;
  /** 请求用户ID */
  requestUserId: number;
}

/** 媒体元数据模型 */
export interface MediaMetaModel {
  /** 元数据ID */
  id: number;
  /** 媒体资源ID */
  mediaId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 元数据值 */
  metaValue?: string | undefined;
}

/** 获取媒体元数据响应 */
export interface GetMediaMetaResponse {
  /** 元数据信息 */
  meta?: MediaMetaModel | undefined;
}

/** 获取媒体元数据列表请求 */
export interface GetMediaMetasRequest {
  /** 单个媒体资源ID */
  mediaId?: number | undefined;
  /** 多个媒体资源ID列表 */
  mediaIds?: GetMediaMetasRequestMediaIds | undefined;
  /** 要获取的元数据键名列表 */
  metaKeys: string[];
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 媒体资源ID列表包装 */
export interface GetMediaMetasRequestMediaIds {
  /** 媒体资源ID列表 */
  value: number[];
}

/** 获取媒体元数据列表响应 */
export interface GetMediaMetasResponse {
  /** 元数据列表 */
  metas: MediaMetaModel[];
}

/** 创建媒体元数据请求 */
export interface CreateMediaMetaRequest {
  /** 媒体资源ID */
  mediaId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 元数据值 */
  metaValue?: string | undefined;
}

/** 创建媒体元数据响应 */
export interface CreateMediaMetaResponse {
  /** 创建的元数据信息 */
  meta: MediaMetaModel;
}

/** 批量创建媒体元数据请求 */
export interface CreateMediaMetasRequest {
  /** 媒体资源ID */
  mediaId: number;
  /** 要创建的元数据列表 */
  metas: MediaMetaModel[];
}

/** 批量创建媒体元数据响应 */
export interface CreateMediaMetasResponse {
  /** 创建的元数据列表 */
  metas: MediaMetaModel[];
}

/** 更新媒体元数据请求 */
export interface UpdateMediaMetaRequest {
  /** 元数据ID */
  id: number;
  /** 新的元数据值 */
  metaValue: string;
}

/** 通过键名更新媒体元数据请求 */
export interface UpdateMediaMetaByKeyRequest {
  /** 媒体资源ID */
  mediaId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 新的元数据值 */
  metaValue: string;
  /** 如果不存在是否创建 */
  createIfNotExist?: boolean | undefined;
}

/** 通过键名删除媒体元数据请求 */
export interface DeleteMediaMetaByKeyRequest {
  /** 媒体资源ID */
  mediaId: number;
  /** 要删除的元数据键名 */
  metaKey: string;
}

export const POMELO_SERVICE_PACKAGE_NAME = 'pomelo.service';

wrappers['.google.protobuf.Timestamp'] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

wrappers['.google.protobuf.Struct'] = { fromObject: Struct.wrap, toObject: Struct.unwrap } as any;

/** 媒体服务接口定义 */

export interface MediaServiceClient {
  /** 获取单个媒体资源 */

  get(request: GetMediaRequest, ...rest: any): Observable<GetMediaResponse>;

  /** 根据文件名获取媒体资源 */

  getByName(request: GetMediaByNameRequest, ...rest: any): Observable<GetMediaResponse>;

  /** 分页获取媒体资源列表 */

  getPaged(request: GetPagedMediaRequest, ...rest: any): Observable<GetPagedMediaResponse>;

  /** 检查媒体文件是否存在 */

  isExists(request: IsMediaExistRequest, ...rest: any): Observable<BoolValue>;

  /** 创建新的媒体资源 */

  create(request: CreateMediaRequest, ...rest: any): Observable<CreateMediaResponse>;

  /** 更新媒体资源 */

  update(request: UpdateMediaRequest, ...rest: any): Observable<Empty>;

  /** 更新媒体元数据 */

  updateMetaData(request: UpdateMediaMetaDataRequest, ...rest: any): Observable<Empty>;

  /** 获取元数据 */

  getMeta(request: GetMetaRequest, ...rest: any): Observable<GetMediaMetaResponse>;

  /** 获取元数据列表 */

  getMetas(request: GetMediaMetasRequest, ...rest: any): Observable<GetMediaMetasResponse>;

  /** 创建元数据 */

  createMeta(request: CreateMediaMetaRequest, ...rest: any): Observable<CreateMediaMetaResponse>;

  /** 批量创建元数据 */

  createMetas(request: CreateMediaMetasRequest, ...rest: any): Observable<CreateMediaMetasResponse>;

  /** 更新元数据 */

  updateMeta(request: UpdateMediaMetaRequest, ...rest: any): Observable<Empty>;

  /** 通过键名更新元数据 */

  updateMetaByKey(request: UpdateMediaMetaByKeyRequest, ...rest: any): Observable<Empty>;

  /** 删除元数据 */

  deleteMeta(request: DeleteMetaRequest, ...rest: any): Observable<Empty>;

  /** 通过键名删除元数据 */

  deleteMetaByKey(request: DeleteMediaMetaByKeyRequest, ...rest: any): Observable<Empty>;
}

/** 媒体服务接口定义 */

export interface MediaServiceController {
  /** 获取单个媒体资源 */

  get(
    request: GetMediaRequest,
    ...rest: any
  ): Promise<GetMediaResponse> | Observable<GetMediaResponse> | GetMediaResponse;

  /** 根据文件名获取媒体资源 */

  getByName(
    request: GetMediaByNameRequest,
    ...rest: any
  ): Promise<GetMediaResponse> | Observable<GetMediaResponse> | GetMediaResponse;

  /** 分页获取媒体资源列表 */

  getPaged(
    request: GetPagedMediaRequest,
    ...rest: any
  ): Promise<GetPagedMediaResponse> | Observable<GetPagedMediaResponse> | GetPagedMediaResponse;

  /** 检查媒体文件是否存在 */

  isExists(request: IsMediaExistRequest, ...rest: any): Promise<BoolValue> | Observable<BoolValue> | BoolValue;

  /** 创建新的媒体资源 */

  create(
    request: CreateMediaRequest,
    ...rest: any
  ): Promise<CreateMediaResponse> | Observable<CreateMediaResponse> | CreateMediaResponse;

  /** 更新媒体资源 */

  update(request: UpdateMediaRequest, ...rest: any): void;

  /** 更新媒体元数据 */

  updateMetaData(request: UpdateMediaMetaDataRequest, ...rest: any): void;

  /** 获取元数据 */

  getMeta(
    request: GetMetaRequest,
    ...rest: any
  ): Promise<GetMediaMetaResponse> | Observable<GetMediaMetaResponse> | GetMediaMetaResponse;

  /** 获取元数据列表 */

  getMetas(
    request: GetMediaMetasRequest,
    ...rest: any
  ): Promise<GetMediaMetasResponse> | Observable<GetMediaMetasResponse> | GetMediaMetasResponse;

  /** 创建元数据 */

  createMeta(
    request: CreateMediaMetaRequest,
    ...rest: any
  ): Promise<CreateMediaMetaResponse> | Observable<CreateMediaMetaResponse> | CreateMediaMetaResponse;

  /** 批量创建元数据 */

  createMetas(
    request: CreateMediaMetasRequest,
    ...rest: any
  ): Promise<CreateMediaMetasResponse> | Observable<CreateMediaMetasResponse> | CreateMediaMetasResponse;

  /** 更新元数据 */

  updateMeta(request: UpdateMediaMetaRequest, ...rest: any): void;

  /** 通过键名更新元数据 */

  updateMetaByKey(request: UpdateMediaMetaByKeyRequest, ...rest: any): void;

  /** 删除元数据 */

  deleteMeta(request: DeleteMetaRequest, ...rest: any): void;

  /** 通过键名删除元数据 */

  deleteMetaByKey(request: DeleteMediaMetaByKeyRequest, ...rest: any): void;
}

export function MediaServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'get',
      'getByName',
      'getPaged',
      'isExists',
      'create',
      'update',
      'updateMetaData',
      'getMeta',
      'getMetas',
      'createMeta',
      'createMetas',
      'updateMeta',
      'updateMetaByKey',
      'deleteMeta',
      'deleteMetaByKey',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      if (descriptor) {
        GrpcMethod('MediaService', method)(constructor.prototype[method], method, descriptor);
      }
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod('MediaService', method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const MEDIA_SERVICE_NAME = 'MediaService';
