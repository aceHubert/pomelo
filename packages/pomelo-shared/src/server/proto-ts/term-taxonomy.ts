// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: term-taxonomy.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { DeleteMetaRequest, GetMetaRequest, UpdateMetaRequest } from './common/meta';
import { Empty } from './google/protobuf/empty';

export const protobufPackage = 'pomelo.service';

/** 分类法模型，用于描述内容的分类体系 */
export interface TermTaxonomyModel {
  /** 分类ID */
  id: number;
  /** 分类名称 */
  name: string;
  /** 别名（URL友好的标识符） */
  slug: string;
  /** 分类法类型（如category、tag等） */
  taxonomy: string;
  /** 分类描述 */
  description: string;
  /** 父分类ID（用于层级结构） */
  parentId: number;
  /** 分组标识 */
  group: number;
  /** 使用计数 */
  count: number;
}

/** 分类关系模型，用于描述内容与分类的关联关系 */
export interface TermRelationshipModel {
  /** 关联对象ID（如文章ID） */
  objectId: number;
  /** 分类ID */
  termTaxonomyId: number;
  /** 排序顺序 */
  order: number;
}

/** 获取分类请求 */
export interface GetTermTaxonomyRequest {
  /** 分类ID */
  id: number;
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 获取分类响应 */
export interface GetTermTaxonomyResponse {
  /** 分类信息 */
  termTaxonomy?: TermTaxonomyModel | undefined;
}

/** 获取分类列表请求 */
export interface GetTermTaxonomiesRequest {
  /** 分类法类型 */
  taxonomy: string;
  /** 父分类ID筛选 */
  parentId?: number | undefined;
  /** 关键字搜索 */
  keyword?: string | undefined;
  /** 分组筛选 */
  group?: number | undefined;
  /** 排除的分类ID列表 */
  excludes: number[];
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 获取分类列表响应 */
export interface GetTermTaxonomiesResponse {
  /** 分类列表 */
  termTaxonomies: TermTaxonomyModel[];
}

/** 根据父分类ID批量获取子分类请求 */
export interface GetTermTaxonomiesByParentIdsRequest {
  /** 父分类ID列表 */
  parentIds: number[];
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 根据父分类ID批量获取子分类响应 */
export interface GetTermTaxonomiesByParentIdsResponse {
  /** 按父分类分组的子分类列表 */
  termTaxonomies: GetTermTaxonomiesByParentIdsResponseParentIdTermTaxonomies[];
}

/** 父分类及其子分类信息 */
export interface GetTermTaxonomiesByParentIdsResponseParentIdTermTaxonomies {
  /** 父分类ID */
  parentId: number;
  /** 子分类列表 */
  value: TermTaxonomyModel[];
}

/** 根据对象ID批量获取关联分类请求 */
export interface GetTermTaxonomiesByObjectIdsRequest {
  /** 分类法类型 */
  taxonomy: string;
  /** 对象ID列表（如文章ID列表） */
  objectIds: number[];
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 根据对象ID批量获取关联分类响应 */
export interface GetTermTaxonomiesByObjectIdsResponse {
  /** 按对象分组的分类列表 */
  termTaxonomies: GetTermTaxonomiesByObjectIdsResponseObjectIdTermTaxonomies[];
}

/** 对象及其关联分类信息 */
export interface GetTermTaxonomiesByObjectIdsResponseObjectIdTermTaxonomies {
  /** 对象ID */
  objectId: number;
  /** 关联的分类列表 */
  value: TermTaxonomyModel[];
}

/** 获取单个对象的关联分类请求 */
export interface GetTermTaxonomiesByObjectIdRequest {
  /** 分类法类型 */
  taxonomy: string;
  /** 对象ID */
  objectId: number;
  /** 父分类ID筛选 */
  parentId?: number | undefined;
  /** 分组筛选 */
  group?: number | undefined;
  /** 是否降序排序 */
  desc?: boolean | undefined;
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 获取单个对象的关联分类响应 */
export interface GetTermTaxonomiesByObjectIdResponse {
  /** 关联的分类列表 */
  termTaxonomies: TermTaxonomyModel[];
}

/** 创建分类请求 */
export interface CreateTermTaxonomyRequest {
  /** 分类名称 */
  name: string;
  /** 别名（可选） */
  slug?: string | undefined;
  /** 分类法类型 */
  taxonomy: string;
  /** 分类描述 */
  description: string;
  /** 父分类ID */
  parentId?: number | undefined;
  /** 分组标识 */
  group?: number | undefined;
  /** 关联的对象ID */
  objectId?: number | undefined;
}

/** 创建分类响应 */
export interface CreateTermTaxonomyResponse {
  /** 创建的分类信息 */
  termTaxonomy: TermTaxonomyModel;
}

/** 创建分类关系请求 */
export interface CreateRelationshipRequest {
  /** 对象ID */
  objectId: number;
  /** 分类ID */
  termTaxonomyId: number;
  /** 排序顺序 */
  order?: number | undefined;
}

/** 创建分类关系响应 */
export interface CreateRelationshipResponse {
  /** 创建的关系信息 */
  relationship: TermRelationshipModel;
}

/** 更新分类请求 */
export interface UpdateTermTaxonomyRequest {
  /** 分类ID */
  id: number;
  /** 分类名称 */
  name?: string | undefined;
  /** 别名 */
  slug?: string | undefined;
  /** 分类描述 */
  description?: string | undefined;
  /** 父分类ID */
  parentId?: number | undefined;
  /** 分组标识 */
  group?: number | undefined;
}

/** 删除分类关系请求 */
export interface DeleteRelationshipRequest {
  /** 对象ID */
  objectId: number;
  /** 分类ID */
  termTaxonomyId: number;
}

/** 删除分类请求 */
export interface DeleteTermTaxonomyRequest {
  /** 分类ID */
  id: number;
}

/** 批量删除分类请求 */
export interface BulkDeleteTermTaxonomyRequest {
  /** 分类ID列表 */
  ids: number[];
}

/** 分类元数据模型 */
export interface TermTaxonomyMetaModel {
  /** 元数据ID */
  id: number;
  /** 分类ID */
  termTaxonomyId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 元数据值 */
  metaValue?: string | undefined;
}

/** 获取分类元数据响应 */
export interface GetTermTaxonomyMetaResponse {
  /** 元数据信息 */
  meta?: TermTaxonomyMetaModel | undefined;
}

/** 获取分类元数据列表请求 */
export interface GetTermTaxonomyMetasRequest {
  /** 单个分类ID */
  termTaxonomyId?: number | undefined;
  /** 多个分类ID列表 */
  termTaxonomyIds?: GetTermTaxonomyMetasRequestTermTaxonomyIds | undefined;
  /** 要获取的元数据键名列表 */
  metaKeys: string[];
  /** 需要返回的字段列表 */
  fields: string[];
}

/** 分类ID列表包装 */
export interface GetTermTaxonomyMetasRequestTermTaxonomyIds {
  /** 分类ID列表 */
  value: number[];
}

/** 获取分类元数据列表响应 */
export interface GetTermTaxonomyMetasResponse {
  /** 元数据列表 */
  metas: TermTaxonomyMetaModel[];
}

/** 创建分类元数据请求 */
export interface CreateTermTaxonomyMetaRequest {
  /** 分类ID */
  termTaxonomyId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 元数据值 */
  metaValue?: string | undefined;
}

/** 创建分类元数据响应 */
export interface CreateTermTaxonomyMetaResponse {
  /** 创建的元数据信息 */
  meta: TermTaxonomyMetaModel;
}

/** 批量创建分类元数据请求 */
export interface CreateTermTaxonomyMetasRequest {
  /** 分类ID */
  termTaxonomyId: number;
  /** 要创建的元数据列表 */
  metas: TermTaxonomyMetaModel[];
}

/** 批量创建分类元数据响应 */
export interface CreateTermTaxonomyMetasResponse {
  /** 创建的元数据列表 */
  metas: TermTaxonomyMetaModel[];
}

/** 通过键名更新分类元数据请求 */
export interface UpdateTermTaxonomyMetaByKeyRequest {
  /** 分类ID */
  termTaxonomyId: number;
  /** 元数据键名 */
  metaKey: string;
  /** 新的元数据值 */
  metaValue: string;
  /** 如果不存在是否创建 */
  createIfNotExist?: boolean | undefined;
}

/** 通过键名删除分类元数据请求 */
export interface DeleteTermTaxonomyMetaByKeyRequest {
  /** 分类ID */
  termTaxonomyId: number;
  /** 要删除的元数据键名 */
  metaKey: string;
}

export const POMELO_SERVICE_PACKAGE_NAME = 'pomelo.service';

/** 分类服务接口定义 */

export interface TermTaxonomyServiceClient {
  /** 获取单个分类 */

  get(request: GetTermTaxonomyRequest, ...rest: any): Observable<GetTermTaxonomyResponse>;

  /** 获取分类列表 */

  getList(request: GetTermTaxonomiesRequest, ...rest: any): Observable<GetTermTaxonomiesResponse>;

  /** 根据父分类ID获取子分类列表 */

  getListByParentIds(
    request: GetTermTaxonomiesByParentIdsRequest,
    ...rest: any
  ): Observable<GetTermTaxonomiesByParentIdsResponse>;

  /** 根据对象ID获取关联分类列表 */

  getListByObjectIds(
    request: GetTermTaxonomiesByObjectIdsRequest,
    ...rest: any
  ): Observable<GetTermTaxonomiesByObjectIdsResponse>;

  /** 获取单个对象的关联分类列表 */

  getListByObjectId(
    request: GetTermTaxonomiesByObjectIdRequest,
    ...rest: any
  ): Observable<GetTermTaxonomiesByObjectIdResponse>;

  /** 创建新分类 */

  create(request: CreateTermTaxonomyRequest, ...rest: any): Observable<CreateTermTaxonomyResponse>;

  /** 创建分类关系 */

  createRelationship(request: CreateRelationshipRequest, ...rest: any): Observable<CreateRelationshipResponse>;

  /** 更新分类 */

  update(request: UpdateTermTaxonomyRequest, ...rest: any): Observable<Empty>;

  /** 删除分类关系 */

  deleteRelationship(request: DeleteRelationshipRequest, ...rest: any): Observable<Empty>;

  /** 删除分类 */

  delete(request: DeleteTermTaxonomyRequest, ...rest: any): Observable<Empty>;

  /** 批量删除分类 */

  bulkDelete(request: BulkDeleteTermTaxonomyRequest, ...rest: any): Observable<Empty>;

  /** 获取元数据 */

  getMeta(request: GetMetaRequest, ...rest: any): Observable<GetTermTaxonomyMetaResponse>;

  /** 获取元数据列表 */

  getMetas(request: GetTermTaxonomyMetasRequest, ...rest: any): Observable<GetTermTaxonomyMetasResponse>;

  /** 创建元数据 */

  createMeta(request: CreateTermTaxonomyMetaRequest, ...rest: any): Observable<CreateTermTaxonomyMetaResponse>;

  /** 批量创建元数据 */

  createMetas(request: CreateTermTaxonomyMetasRequest, ...rest: any): Observable<CreateTermTaxonomyMetasResponse>;

  /** 更新元数据 */

  updateMeta(request: UpdateMetaRequest, ...rest: any): Observable<Empty>;

  /** 通过键名更新元数据 */

  updateMetaByKey(request: UpdateTermTaxonomyMetaByKeyRequest, ...rest: any): Observable<Empty>;

  /** 删除元数据 */

  deleteMeta(request: DeleteMetaRequest, ...rest: any): Observable<Empty>;

  /** 通过键名删除元数据 */

  deleteMetaByKey(request: DeleteTermTaxonomyMetaByKeyRequest, ...rest: any): Observable<Empty>;
}

/** 分类服务接口定义 */

export interface TermTaxonomyServiceController {
  /** 获取单个分类 */

  get(
    request: GetTermTaxonomyRequest,
    ...rest: any
  ): Promise<GetTermTaxonomyResponse> | Observable<GetTermTaxonomyResponse> | GetTermTaxonomyResponse;

  /** 获取分类列表 */

  getList(
    request: GetTermTaxonomiesRequest,
    ...rest: any
  ): Promise<GetTermTaxonomiesResponse> | Observable<GetTermTaxonomiesResponse> | GetTermTaxonomiesResponse;

  /** 根据父分类ID获取子分类列表 */

  getListByParentIds(
    request: GetTermTaxonomiesByParentIdsRequest,
    ...rest: any
  ):
    | Promise<GetTermTaxonomiesByParentIdsResponse>
    | Observable<GetTermTaxonomiesByParentIdsResponse>
    | GetTermTaxonomiesByParentIdsResponse;

  /** 根据对象ID获取关联分类列表 */

  getListByObjectIds(
    request: GetTermTaxonomiesByObjectIdsRequest,
    ...rest: any
  ):
    | Promise<GetTermTaxonomiesByObjectIdsResponse>
    | Observable<GetTermTaxonomiesByObjectIdsResponse>
    | GetTermTaxonomiesByObjectIdsResponse;

  /** 获取单个对象的关联分类列表 */

  getListByObjectId(
    request: GetTermTaxonomiesByObjectIdRequest,
    ...rest: any
  ):
    | Promise<GetTermTaxonomiesByObjectIdResponse>
    | Observable<GetTermTaxonomiesByObjectIdResponse>
    | GetTermTaxonomiesByObjectIdResponse;

  /** 创建新分类 */

  create(
    request: CreateTermTaxonomyRequest,
    ...rest: any
  ): Promise<CreateTermTaxonomyResponse> | Observable<CreateTermTaxonomyResponse> | CreateTermTaxonomyResponse;

  /** 创建分类关系 */

  createRelationship(
    request: CreateRelationshipRequest,
    ...rest: any
  ): Promise<CreateRelationshipResponse> | Observable<CreateRelationshipResponse> | CreateRelationshipResponse;

  /** 更新分类 */

  update(request: UpdateTermTaxonomyRequest, ...rest: any): void;

  /** 删除分类关系 */

  deleteRelationship(request: DeleteRelationshipRequest, ...rest: any): void;

  /** 删除分类 */

  delete(request: DeleteTermTaxonomyRequest, ...rest: any): void;

  /** 批量删除分类 */

  bulkDelete(request: BulkDeleteTermTaxonomyRequest, ...rest: any): void;

  /** 获取元数据 */

  getMeta(
    request: GetMetaRequest,
    ...rest: any
  ): Promise<GetTermTaxonomyMetaResponse> | Observable<GetTermTaxonomyMetaResponse> | GetTermTaxonomyMetaResponse;

  /** 获取元数据列表 */

  getMetas(
    request: GetTermTaxonomyMetasRequest,
    ...rest: any
  ): Promise<GetTermTaxonomyMetasResponse> | Observable<GetTermTaxonomyMetasResponse> | GetTermTaxonomyMetasResponse;

  /** 创建元数据 */

  createMeta(
    request: CreateTermTaxonomyMetaRequest,
    ...rest: any
  ):
    | Promise<CreateTermTaxonomyMetaResponse>
    | Observable<CreateTermTaxonomyMetaResponse>
    | CreateTermTaxonomyMetaResponse;

  /** 批量创建元数据 */

  createMetas(
    request: CreateTermTaxonomyMetasRequest,
    ...rest: any
  ):
    | Promise<CreateTermTaxonomyMetasResponse>
    | Observable<CreateTermTaxonomyMetasResponse>
    | CreateTermTaxonomyMetasResponse;

  /** 更新元数据 */

  updateMeta(request: UpdateMetaRequest, ...rest: any): void;

  /** 通过键名更新元数据 */

  updateMetaByKey(request: UpdateTermTaxonomyMetaByKeyRequest, ...rest: any): void;

  /** 删除元数据 */

  deleteMeta(request: DeleteMetaRequest, ...rest: any): void;

  /** 通过键名删除元数据 */

  deleteMetaByKey(request: DeleteTermTaxonomyMetaByKeyRequest, ...rest: any): void;
}

export function TermTaxonomyServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'get',
      'getList',
      'getListByParentIds',
      'getListByObjectIds',
      'getListByObjectId',
      'create',
      'createRelationship',
      'update',
      'deleteRelationship',
      'delete',
      'bulkDelete',
      'getMeta',
      'getMetas',
      'createMeta',
      'createMetas',
      'updateMeta',
      'updateMetaByKey',
      'deleteMeta',
      'deleteMetaByKey',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      if (descriptor) {
        GrpcMethod('TermTaxonomyService', method)(constructor.prototype[method], method, descriptor);
      }
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod('TermTaxonomyService', method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TERM_TAXONOMY_SERVICE_NAME = 'TermTaxonomyService';
